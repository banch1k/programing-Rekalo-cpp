# Лабораторна робота №19. ООП. Перевантаження операторів

## 1 Вимоги

### 1.1 Розробник

* Рекало Іван Сергійович;
* студент групи КН923г;
* 13-вер-2024.

### 1.2 Завдання

**Поширити попередню лабораторну роботу (потоковий i/o при роботі зі класами) таким чином:**
1. У базовому класі (прикладної галузі) перевантажити:
- оператор присвоювання;
- оператор порівняння (на вибір 2 протележних оператора: == , != ; < , >= ; > , <= );
- оператори введення / виведення;
2. У класі-списку перевантажити:
- оператор індексування ( [ ] );
- оператори введення / виведення з акцентом роботи, у тому числі і з файлами

## 2 Опис програми

### 2.1 Функціональне призначення

Програма призначена для управління списком аудиторій, що містить інформацію про id та вмістимість кожної аудиторії. Вона дозволяє додавати нові аудиторії, видаляти існуючі, отримувати інформацію про аудиторію за індексом, здійснювати пошук великих аудиторій, робити запис та читання файлів, а також перевантажувати оператори

### 2.2 Опис логічної структури

#### Клас Audience
```C
class Audience {
```

*Призначення*: зберігає інформацію про аудиторію.

*Методи*:

- Конструктори
- Деструктор
- Оператор присвоєння
- Гетери та сетери для id та capacity
- Метод toString() та fromString() для читання файлу та запису у файл
- operator== та operator!=: перевантаження операторів рівняння
- operator<< та operator>>: перевантаження операторів введення/виведення

#### Клас List
```C
class List {
```

*Призначення*: управляє списком об'єктів класу Audience.

*Методи*: 

- Конструктори
- Деструктор
- Оператор присвоєння
- addAudience(): додає аудиторію до списку
- removeAudience(): видаляє аудиторію за індексом
- getAudience(): повертає аудиторію за індексом
- print(): виводить всі аудиторії в списку
- findLargeAudiences(): шукає аудиторії з мінімальною вмістимістю
- readFromFile(): читає дані з файлу  
- writeToFile(): записує дані у файл
- operator<< та operator>>: перевантаження операторів введення/виведення
- operator[]: перевантаження оператора індексування

#### Головна функція
```C
int main();
```

*Призначення*: головна функція main є точкою входу в програму, де здійснюється ініціалізація даних, управління списком аудиторій і виведення результатів. Також вона відповідає за створення, додавання і видалення аудиторій зі списку, отримання доступу до аудиторій, пошуку аудиторій за вмістимістю, та запис даних у файл і читання їх з файлу

*Опис роботи*:

- Створення списку аудиторій: Ініціалізується об'єкт List, який буде використовуватися для зберігання аудиторій
- Додавання аудиторій до списку: Створюються два об'єкти Audience (a1 з ідентифікатором 1 і місткістю 100 та a2 з ідентифікатором 2 і місткістю 200) і додаються до списку методом addAudience.
- Виведення всіх аудиторій: Викликається метод print для об'єкта list, який виводить на екран інформацію про всі аудиторії у списку.
- Видалення аудиторії: Видаляється аудиторія за індексом 1 методом removeAudience, після чого список знову виводиться на екран для відображення змін.
- Додавання нової аудиторії: Створюється новий об'єкт Audience (a3 з ідентифікатором 3 і місткістю 300) і додається до списку
- Отримання даних про аудиторію за індексом: За допомогою методу getAudience програма намагається отримати дані про аудиторію з індексом 1. Якщо індекс вірний, дані аудиторії виводяться на екран.
- Спроба отримати дані про аудиторію за неправильним індексом: Програма намагається отримати дані про аудиторію з неіснуючим індексом (10) і виводить відповідне повідомлення про помилку.
- Пошук великих аудиторій: Використовується метод findLargeAudiences для пошуку аудиторій з вмістимістю більше ніж 150. Якщо такі аудиторії знайдено, вони виводяться на екран. Якщо ні, виводиться повідомлення, що великих аудиторій не знайдено.
- Запис у файл: за допомогою методу ofstream outFile дані записуються у визначений файл
- Читання з файлу: використовується метод ifstream inFile для зчитування даних з файлу

#### Структура проекту
```
                 └── lab19
                     ├── Makefile
                     ├── Doxyfile
                     ├── README.md
                     ├── doc
                         └── lab19.md
                     ├── src
                         ├── list.cpp
                         ├── list.h
                         ├── main.cpp
                         ├── entity.cpp
                         ├── entity.h
                     └── test
                         └── test.cpp
```

### 2.3 Важливі фрагменти програми

#### Перевантаження операторів порівняння
```C
bool Audience::operator==(const Audience& other) const {
    return id == other.id && capacity == other.capacity;
}

bool Audience::operator!=(const Audience& other) const {
    return !(*this == other);
```

#### Перевантаження операторів введення/виведення у Audience
```C
ostream& operator<<(ostream& os, const Audience& audience) {
    os << "Audience ID: " << audience.id << ", Capacity: " << audience.capacity;
    return os;
}

istream& operator>>(istream& is, Audience& audience) {
    is >> audience.id >> audience.capacity;
    return is;
```

#### Оператор присвоєння у Audience
```C
Audience& Audience::operator=(const Audience& other) {
    if (this != &other) {
        id = other.id;
        capacity = other.capacity;
    }
    return *this;
}
```

#### Оператор присвоєння у List
```C
List& List::operator=(const List& other) {
    if (this != &other) {
        delete[] audiences;
        size = other.size;
        capacity = other.capacity;
        audiences = new Audience[capacity];
        copy(other.audiences, other.audiences + size, audiences);
        cout << "Оператор присвоєння List викликаний" << endl;
    }
    return *this;
}
```

#### Перевантаження оператора індексування
```C
Audience& List::operator[](size_t index) {
    if (index >= size) throw std::out_of_range("Індекс поза межами");
    return audiences[index];
}

const Audience& List::operator[](size_t index) const {
    if (index >= size) throw std::out_of_range("Індекс поза межами");
    return audiences[index];
}
```

#### Перевантаження операторів введення/виведення у List
```C
ostream& operator<<(ostream& os, const List& list) {
    for (size_t i = 0; i < list.size; ++i) {
        os << list.audiences[i].toString() << endl;
    }
    return os;
}

istream& operator>>(istream& is, List& list) {
    string line;
    while (getline(is, line)) {
        Audience audience;
        audience.fromString(line);
        list.addAudience(audience);
    }
    return is;
}
```

#### Розширення масиву
```C
void List::resize() {
    size_t newCapacity = (capacity == 0) ? 1 : capacity * 2;
    Audience* newAudiences = new Audience[newCapacity];
    copy(audiences, audiences + size, newAudiences);
    delete[] audiences;
    audiences = newAudiences;
    capacity = newCapacity;
}
```

#### Перевірка відсутності витоків пам'яті за допомогою утиліти valgrind
```C
==84083== Memcheck, a memory error detector
==84083== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==84083== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==84083== Command: ./main
==84083== 
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор за замовчуванням викликаний
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 1, capacity = 100
Всі аудиторії:
Audience ID: 2, Capacity: 200
Audience ID: 1, Capacity: 100

Видалення аудиторії з індексом 1:
Audience ID: 2, Capacity: 200
Конструктор з параметрами викликаний: id = 3, capacity = 300

Додавання аудиторії:
Audience ID: 3, Capacity: 300
Audience ID: 2, Capacity: 200

Отримання даних про аудиторію з індексом 1:
Audience ID: 2, Capacity: 200

Спроба отримати дані про аудиторію з індексом 10:
Помилка: Індекс поза межами
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний

Великі аудиторії:
Audience ID: 3, Capacity: 300
Audience ID: 2, Capacity: 200
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 3, capacity = 300

Дані записані у файл: audiences.txt
Конструктор List викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 3, capacity = 300
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 3, capacity = 300
Деструктор викликаний: id = 2, capacity = 200

Дані прочитані з файлу:
Audience ID: 2, Capacity: 200
Audience ID: 3, Capacity: 300
Деструктор викликаний: id = 3, capacity = 300
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Деструктор викликаний: id = 3, capacity = 300
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 3, capacity = 300
Деструктор List викликаний
==84083== 
==84083== HEAP SUMMARY:
==84083==     in use at exit: 0 bytes in 0 blocks
==84083==   total heap usage: 32 allocs, 32 frees, 96,290 bytes allocated
==84083== 
==84083== All heap blocks were freed -- no leaks are possible
==84083== 
==84083== For lists of detected and suppressed errors, rerun with: -s
==84083== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
```

#### Модульний тест
```C
./dist/test.bin
Тест оператора присвоєння:
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 1, capacity = 100
Конструктор List викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння List викликаний
List 1:
Audience ID: 2, Capacity: 200
Audience ID: 1, Capacity: 100
List 2:
Audience ID: 2, Capacity: 200
Audience ID: 1, Capacity: 100

Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Тест додавання та видалення аудиторій:
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 1, capacity = 100
Аудиторії:
Audience ID: 2, Capacity: 200
Audience ID: 1, Capacity: 100
Після видалення аудиторії з індексом 1:
Audience ID: 2, Capacity: 200

Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Тест оператора порівняння:
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор з параметрами викликаний: id = 1, capacity = 100
Аудиторії a1 і a3 рівні
Аудиторії a1 і a2 не рівні

Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Тест операцій з файлами:
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 1, capacity = 100
Дані записані у файл: test_audiences.txt
Конструктор List викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Дані прочитані з файлу:
Audience ID: 1, Capacity: 100
Audience ID: 2, Capacity: 200

Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор List викликаний
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Тест оператора індексування:
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 1, capacity = 100
Аудиторія з індексом 0:
Audience ID: 2, Capacity: 200
Аудиторія з індексом 1:
Audience ID: 1, Capacity: 100
Спроба доступу до аудиторії з індексом 2:
Помилка: Індекс поза межами

Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Тест операторів введення/виведення:
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 1, capacity = 100
Виведення списку:
Audience ID: 2, Capacity: 200
Audience ID: 1, Capacity: 100
Конструктор List викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Список після оператора введення:
Audience ID: 1, Capacity: 100
Audience ID: 2, Capacity: 200

Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор List викликаний
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Всі тести пройдено!
```

## 3 Варіанти використання

#### Програма може бути використана для:

1. Управління списком аудиторій
2. Розробка програмного забезпечення для управління об'єктами
3. Автоматизація управління приміщеннями в навчальних закладах
4. Пошук та аналіз аудиторій за заданими критеріями

## Висновки

У цій лабораторній роботі ми познайомилися з перевантаженням операторів, яке дає можливість зробити код більш компактним та зрозумілим, а також дозволяє використовувати стандартні оператори, що зменшує потребу в написанні додаткових функцій для роботи програми