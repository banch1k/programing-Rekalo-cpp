# Лабораторна робота №17. ООП. Вступ до ООП

## 1 Вимоги

### 1.1 Розробник

* Рекало Іван Сергійович;
* студент групи КН923г;
* 12-вер-2024.

### 1.2 Завдання

Розробити програму для роботи з класами та списками об'єктів, що представляють аудиторії. Програма має надавати функціональність додавання, видалення, отримання та пошуку аудиторій за певним критерієм

## 2 Опис програми

### 2.1 Функціональне призначення

Програма призначена для управління списком аудиторій, що містить інформацію про id та вмістимість кожної аудиторії. Вона дозволяє додавати нові аудиторії, видаляти існуючі, отримувати інформацію про аудиторію за індексом та здійснювати пошук великих аудиторій

### 2.2 Опис логічної структури

#### Клас Audience
```C
class Audience {
```

*Призначення*: зберігає інформацію про аудиторію.

*Методи*:

- Конструктори
- Деструктор
- Оператор присвоєння
- Гетери та сетери для id та capacity
- Метод print() для виведення інформації про аудиторію

#### Клас List
```C
class List {
```

*Призначення*: управляє списком об'єктів класу Audience.

*Методи*: 

- Конструктори
- Деструктор
- Оператор присвоєння
- addAudience(): додає аудиторію до списку
- removeAudience(): видаляє аудиторію за індексом
- getAudience(): повертає аудиторію за індексом
- print(): виводить всі аудиторії в списку
- findLargeAudiences(): шукає аудиторії з мінімальною місткістю

#### Головна функція
```C
int main();
```

*Призначення*: головна функція main є точкою входу в програму, де здійснюється ініціалізація даних, управління списком аудиторій і виведення результатів. Також вона відповідає за створення, додавання і видалення аудиторій зі списку, отримання доступу до аудиторій, а також пошук аудиторій за вмістимістю.

*Опис роботи*:

- Створення списку аудиторій: Ініціалізується об'єкт List, який буде використовуватися для зберігання аудиторій
- Додавання аудиторій до списку: Створюються два об'єкти Audience (a1 з ідентифікатором 1 і місткістю 100 та a2 з ідентифікатором 2 і місткістю 200) і додаються до списку методом addAudience.
- Виведення всіх аудиторій: Викликається метод print для об'єкта list, який виводить на екран інформацію про всі аудиторії у списку.
- Видалення аудиторії: Видаляється аудиторія за індексом 1 методом removeAudience, після чого список знову виводиться на екран для відображення змін.
- Додавання нової аудиторії: Створюється новий об'єкт Audience (a3 з ідентифікатором 3 і місткістю 300) і додається до списку
- Отримання даних про аудиторію за індексом: За допомогою методу getAudience програма намагається отримати дані про аудиторію з індексом 1. Якщо індекс вірний, дані аудиторії виводяться на екран.
- Спроба отримати дані про аудиторію за неправильним індексом: Програма намагається отримати дані про аудиторію з неіснуючим індексом (10) і виводить відповідне повідомлення про помилку.
- Пошук великих аудиторій: Використовується метод findLargeAudiences для пошуку аудиторій з вмістимістю більше ніж 150. Якщо такі аудиторії знайдено, вони виводяться на екран. Якщо ні, виводиться повідомлення, що великих аудиторій не знайдено.

#### Структура проекту
```
                 └── lab17/
                     ├── Makefile
                     ├── Doxyfile
                     ├── README.md
                     ├── doc
                         └── lab17.md
                     ├── src
                         ├── list.cpp
                         ├── list.h
                         ├── main.cpp
                         ├── entity.cpp
                         ├── entity.h
                     └── test
                         └── test.cpp
```

### 2.3 Важливі фрагменти програми

#### Конструктор Audience
```C
Audience::Audience(int id, int capacity) : id(id), capacity(capacity) {
    std::cout << "Конструктор з параметрами викликаний: id = " << id << ", capacity = " << capacity << std::endl;
}
```

#### Метод addAudience
```C
void List::addAudience(const Audience& audience, size_t pos) {
    if (size >= capacity) {
        size_t newCapacity = (capacity == 0) ? 1 : capacity * 2;
        Audience* newAudiences = new Audience[newCapacity];
        std::copy(audiences, audiences + size, newAudiences);
        delete[] audiences;
        audiences = newAudiences;
        capacity = newCapacity;
    }
    if (pos > size) pos = size;
    for (size_t i = size; i > pos; --i) {
        audiences[i] = audiences[i - 1];
    }
    audiences[pos] = audience;
    ++size;
}
```

#### Метод findLargeAudiences
```C
Audience* List::findLargeAudiences(int minCapacity, size_t& count) const {
    count = 0;
    
    for (size_t i = 0; i < size; ++i) {
        if (audiences[i].getCapacity() >= minCapacity) {
            ++count;
        }
    }

    if (count == 0) {
        return nullptr;
    }

    Audience* largeAudiences = new Audience[count];
    size_t index = 0;

    for (size_t i = 0; i < size; ++i) {
        if (audiences[i].getCapacity() >= minCapacity) {
            largeAudiences[index++] = audiences[i];
        }
    }

    return largeAudiences;
}
```

#### Метод removeAudience
```C
void List::removeAudience(size_t index) {
    if (index >= size) return;
    for (size_t i = index; i < size - 1; ++i) {
        audiences[i] = audiences[i + 1];
    }
    --size;
}
```

#### Метод getAudience
```C
Audience& List::getAudience(size_t index) {
    if (index >= size) throw std::out_of_range("Індекс поза межами");
    return audiences[index];
}
```

#### Метод print класу Audience
```C
void Audience::print() const {
    std::cout << "Audience ID: " << id << std::endl;
    std::cout << "Capacity: " << capacity << std::endl;
}
```

#### Метод print класу List
```C
void List::print() const {
    for (size_t i = 0; i < size; ++i) {
        audiences[i].print();
    }
}
```

#### Деструктор класу List
```C
List::~List() {
    delete[] audiences;
    std::cout << "Деструктор List викликаний" << std::endl;
}
```

#### Перевірка відсутності витоків пам'яті за допомогою утиліти valgrind
```C
==30668== Memcheck, a memory error detector
==30668== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==30668== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==30668== Command: ./main
==30668== 
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 2, capacity = 200
Всі аудиторії:
Audience ID: 2
Capacity: 200
Audience ID: 1
Capacity: 100

Видалення аудиторії з індексом 1:
Audience ID: 2
Capacity: 200
Конструктор з параметрами викликаний: id = 3, capacity = 300
Оператор присвоєння викликаний: id = 2, capacity = 200
Оператор присвоєння викликаний: id = 3, capacity = 300

Додавання аудиторії:
Audience ID: 3
Capacity: 300
Audience ID: 2
Capacity: 200

Отримання даних про аудиторію з індексом 1:
Audience ID: 2
Capacity: 200

Спроба отримати дані про аудиторію з індексом 10:
Помилка: Індекс поза межами
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 3, capacity = 300
Оператор присвоєння викликаний: id = 2, capacity = 200

Великі аудиторії:
Audience ID: 3
Capacity: 300
Audience ID: 2
Capacity: 200
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 3, capacity = 300
Деструктор викликаний: id = 3, capacity = 300
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 3, capacity = 300
Деструктор List викликаний
==30668== 
==30668== HEAP SUMMARY:
==30668==     in use at exit: 0 bytes in 0 blocks
==30668==   total heap usage: 7 allocs, 7 frees, 73,995 bytes allocated
==30668== 
==30668== All heap blocks were freed -- no leaks are possible
==30668== 
==30668== For lists of detected and suppressed errors, rerun with: -s
==30668== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
```

#### Модульний тест
```C
./dist/test.bin
Тест: Конструктор за замовчуванням
Конструктор List викликаний
Деструктор List викликаний

Тест: Додавання нових аудиторій
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 2, capacity = 200
Audience ID: 2
Capacity: 200
Audience ID: 1
Capacity: 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний

Тест: Видалення аудиторії
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 2, capacity = 200
Audience ID: 2
Capacity: 200
Audience ID: 1
Capacity: 100
Оператор присвоєння викликаний: id = 1, capacity = 100
Audience ID: 1
Capacity: 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор List викликаний

Тест: Конструктор копіювання
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 2, capacity = 200
Оператор присвоєння викликаний: id = 1, capacity = 100
Конструктор копіювання List викликаний
Audience ID: 2
Capacity: 200
Audience ID: 1
Capacity: 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний

Тест: Оператор присвоєння
Конструктор List викликаний
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 100
Конструктор з параметрами викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 1, capacity = 100
Оператор присвоєння викликаний: id = 2, capacity = 200
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 2, capacity = 200
Оператор присвоєння викликаний: id = 1, capacity = 100
Оператор присвоєння List викликаний
Audience ID: 2
Capacity: 200
Audience ID: 1
Capacity: 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний
Деструктор викликаний: id = 1, capacity = 100
Деструктор викликаний: id = 2, capacity = 200
Деструктор List викликаний

Тест: Пошук великих аудиторій
Конструктор List викликаний
Конструктор з параметрами викликаний: id = 1, capacity = 50
Конструктор з параметрами викликаний: id = 2, capacity = 151
Конструктор з параметрами викликаний: id = 3, capacity = 300
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 50
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 1, capacity = 50
Деструктор викликаний: id = 1, capacity = 50
Оператор присвоєння викликаний: id = 1, capacity = 50
Оператор присвоєння викликаний: id = 2, capacity = 151
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 2, capacity = 151
Оператор присвоєння викликаний: id = 1, capacity = 50
Деструктор викликаний: id = 1, capacity = 50
Деструктор викликаний: id = 2, capacity = 151
Оператор присвоєння викликаний: id = 1, capacity = 50
Оператор присвоєння викликаний: id = 2, capacity = 151
Оператор присвоєння викликаний: id = 3, capacity = 300
Конструктор за замовчуванням викликаний
Конструктор за замовчуванням викликаний
Оператор присвоєння викликаний: id = 3, capacity = 300
Оператор присвоєння викликаний: id = 2, capacity = 151
Великі аудиторії:
Audience ID: 3
Capacity: 300
Audience ID: 2
Capacity: 151
Деструктор викликаний: id = 3, capacity = 300
Деструктор викликаний: id = 2, capacity = 151
Деструктор викликаний: id = 1, capacity = 50
Деструктор викликаний: id = 0, capacity = 0
Деструктор викликаний: id = 1, capacity = 50
Деструктор викликаний: id = 2, capacity = 151
Деструктор викликаний: id = 3, capacity = 300
Деструктор List викликаний
```

## 3 Варіанти використання

#### Програма може бути використана для:

1. Розробка програмного забезпечення для управління об'єктами
2. Автоматизація управління приміщеннями в навчальних закладах
3. Пошук та аналіз аудиторій за заданими критеріями
4. Управління списком аудиторій

## Висновки

Лабораторна робота навчила нас працювати з односпрямованим списком (додавати, видаляти, сортувати список, шукати аудиторії, зберігати дані про аудиторії та зберігати та зчитувати дані з файлів.